{"version":3,"sources":["modules/Game.class.js","scripts/main.js"],"names":["Game","initialState","score","status","state","copyState","addRandomTile","map","row","emptyTiles","col","push","length","randomIndex","Math","floor","random","move","checkGameState","direction","originalState","combineRow","newRow","filter","n","i","moveStateLeft","moveRowLeft","moveStateRight","moveRowRight","copyRow","reverse","transposeState","areStatesEqual","current","hasEmptyCells","canCombine","result","state1","state2","module","exports","require","game","cells","document","querySelectorAll","buttonStart","querySelector","updateView","getState","cell","className","textContent","classList","add","getScore","gameStatus","getStatus","remove","addEventListener","e","key","moveLeft","moveRight","moveUp","moveDown","restart","start"],"mappings":"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","file":"main.8e4fb26f.js","sourceRoot":"..\\src","sourcesContent":["\"use strict\";\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.score = 0;\n    this.status = \"idle\";\n    this.initialState = initialState;\n    this.state = this.copyState(this.initialState);\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    if (this.status === \"idle\") {\n      this.status = \"playing\";\n      this.addRandomTile();\n      this.addRandomTile();\n    }\n  }\n\n  restart() {\n    this.state = this.copyState(this.initialState);\n    this.score = 0;\n    this.status = \"idle\";\n  }\n\n  copyState(state) {\n    return state.map((row) => [...row]);\n  }\n\n  addRandomTile() {\n    const emptyTiles = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 0) {\n          emptyTiles.push([row, col]);\n        }\n      }\n    }\n\n    if (emptyTiles.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyTiles.length);\n\n      const [row, col] = emptyTiles[randomIndex];\n\n      this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  moveLeft() {\n    if (this.status !== \"playing\") {\n      return;\n    }\n\n    const moved = this.move(\"left\");\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameState();\n    }\n  }\n\n  moveRight() {\n    if (this.status !== \"playing\") {\n      return;\n    }\n\n    const moved = this.move(\"right\");\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameState();\n    }\n  }\n\n  moveUp() {\n    if (this.status !== \"playing\") {\n      return;\n    }\n\n    const moved = this.move(\"up\");\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameState();\n    }\n  }\n\n  moveDown() {\n    if (this.status !== \"playing\") {\n      return;\n    }\n\n    const moved = this.move(\"down\");\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameState();\n    }\n  }\n\n  move(direction) {\n    const originalState = this.copyState(this.state);\n\n    const combineRow = (row) => {\n      const newRow = row.filter((n) => n !== 0);\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          newRow[i + 1] = 0;\n          this.score += newRow[i];\n        }\n      }\n\n      return newRow.filter((n) => n !== 0);\n    };\n\n    const moveRowLeft = (row) => {\n      const newRow = combineRow(row);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      return newRow;\n    };\n\n    const moveRowRight = (row) => {\n      const copyRow = [...row];\n\n      const newRow = combineRow(copyRow.reverse());\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      return newRow.reverse();\n    };\n\n    const moveStateLeft = (state) => {\n      return state.map((row) => moveRowLeft(row));\n    };\n\n    const moveStateRight = (state) => {\n      return state.map((row) => moveRowRight(row));\n    };\n\n    switch (direction) {\n      case \"left\":\n        this.state = moveStateLeft(this.state);\n        break;\n\n      case \"right\":\n        this.state = moveStateRight(this.state);\n        break;\n\n      case \"up\":\n        this.state = this.transposeState(\n          moveStateLeft(this.transposeState(this.state)),\n        );\n        break;\n\n      case \"down\":\n        this.state = this.transposeState(\n          moveStateRight(this.transposeState(this.state)),\n        );\n        break;\n    }\n\n    return !this.areStatesEqual(this.state, originalState);\n  }\n\n  hasEmptyCells() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  canCombine() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const current = this.state[row][col];\n\n        if (col < 3 && current === this.state[row][col + 1]) {\n          return true;\n        }\n\n        if (row < 3 && current === this.state[row + 1][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkGameState() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 2048) {\n          this.status = \"win\";\n\n          return;\n        }\n      }\n    }\n\n    if (this.hasEmptyCells() || this.canCombine()) {\n      return;\n    }\n    this.status = \"lose\";\n  }\n\n  transposeState(state) {\n    const result = [];\n\n    for (let col = 0; col < 4; col++) {\n      result[col] = [];\n\n      for (let row = 0; row < 4; row++) {\n        result[col].push(state[row][col]);\n      }\n    }\n\n    return result;\n  }\n\n  areStatesEqual(state1, state2) {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (state1[row][col] !== state2[row][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\nmodule.exports = Game;\n","\"use strict\";\n\nconst Game = require(\"../modules/Game.class\");\nconst game = new Game();\nconst cells = document.querySelectorAll(\".field-cell\");\nconst buttonStart = document.querySelector(\".button.start\");\n\ndocument.addEventListener(\"keydown\", (e) => {\n  if (game.getStatus() === \"playing\") {\n    switch (e.key) {\n      case \"ArrowLeft\":\n        game.moveLeft();\n        break;\n\n      case \"ArrowRight\":\n        game.moveRight();\n        break;\n\n      case \"ArrowUp\":\n        game.moveUp();\n        break;\n\n      case \"ArrowDown\":\n        game.moveDown();\n        break;\n    }\n\n    updateView();\n  }\n});\n\nfunction updateView() {\n  let i = 0;\n  const state = game.getState();\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      const cell = cells[i];\n\n      cell.className = \"field-cell\";\n\n      if (state[row][col]) {\n        cell.textContent = state[row][col];\n        cell.classList.add(`field-cell--${state[row][col]}`);\n      } else {\n        cell.textContent = \"\";\n      }\n      i++;\n    }\n  }\n\n  document.querySelector(\".game-score\").textContent = game.getScore();\n\n  const gameStatus = game.getStatus();\n\n  if (gameStatus === \"win\") {\n    document.querySelector(\".message-win\").classList.remove(\"hidden\");\n  } else if (gameStatus === \"lose\") {\n    document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n  }\n}\n\nbuttonStart.addEventListener(\"click\", () => {\n  if (buttonStart.className === \"button restart\") {\n    game.restart();\n  }\n\n  game.start();\n  updateView();\n  document.querySelector(\".message-win\").classList.add(\"hidden\");\n  document.querySelector(\".message-lose\").classList.add(\"hidden\");\n  document.querySelector(\".message-start\").classList.add(\"hidden\");\n  buttonStart.textContent = \"Restart\";\n  buttonStart.className = \"button restart\";\n});\n"]}